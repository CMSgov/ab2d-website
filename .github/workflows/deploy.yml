name: "deploy"

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      deploy_path:
        required: false
        type: string

jobs: 
  deploy-dev:
    runs-on: self-hosted
    if: ${{ !startsWith(github.actor, 'bot-') }}

    steps:
      # Step 1: Checkout the repo
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install project dependencies
        run: |
          sudo dnf -y install ruby3.2 ruby3.2-devel openssl-devel amazon-rpm-config gcc-c++
      
      # Step 3: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with: 
          cache: 'npm'
          node-version-file: '.nvmrc' 
          # node-version: 20 ## Using a .nvmrc file to stay in sync with the repo

      # Step 4: Set up Ruby
      - name: Set up ruby
        run: |
          ruby -v
          echo 'export GEM_HOME="$HOME/gems"' >> $GITHUB_ENV
          echo 'export PATH="$HOME/ec2-user/bin:$HOME/gems/bin:$PATH"' >> $GITHUB_ENV
        
      # Step 5: Install Ruby Gems
      - name: Install jekyll and bundler
        run: |
          sudo chmod -R 777 /usr/share
          sudo gem install jekyll bundler
          sudo bundle install

      # Step 6: Install Node.js Dependencies
      - name: Install npm dependencies
        run: |
          npm ci

      # Step 7: Compile Assets
      - name: Compile assets with Gulp
        run: |
          npm run assets:build

      # Step 8: Build Site
      - name: Build the site
        env:
          JEKYLL_ENV: ${{ inputs.environment }}
        run: |
          bundle exec jekyll build --baseurl ${{ inputs.deploy_path && format('/{0}', inputs.deploy_path) || ''}}

      # Step 9: Initialize AWS Connection
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        env: 
          ACCOUNT_ID: ${{ inputs.environment == 'production' && secrets.PROD_ACCOUNT_ID || secrets.TEST_ACCOUNT_ID }}
          ROLE: ${{ inputs.environment == 'production' && 'ab2d-prod-github-actions' ||'ab2d-test-github-actions' }}
        with: 
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ env.ACCOUNT_ID }}:role/delegatedadmin/developer/${{ env.ROLE }}

      # Step 10: Deploy to S3
      - name: Deploy the site
        env: 
          BUCKET_BASE: ${{ inputs.environment == 'production' && 'website-ab2d-east-prod' || 'website-ab2d-east-impl' }}
        run: |
          aws s3 sync _site/ s3://${{ env.BUCKET_BASE }}/${{ inputs.deploy_path }}/

      # Step 11: Invalidate existing cache
      # - name: Invalidate Cloudfront cache
      #   if: inputs.environment == 'production'
      #   run: |
      #     aws cloudfront create-invalidation \
      #     --distribution-id ${{ secrets.PROD_DISTRIBUTION_ID }} \
      #     --paths "/*"